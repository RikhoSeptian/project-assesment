=== Membaca semua data REST API ===

public function index() {
	$students = Mahasiswa::all();
	return response()->json([
		''students' => $students
	]);
}

=== Membaca data berdasarkan ID ===

public function show($id) {
	$mahasiswa = Mahasiswa::find($id);
	if (!$mahasiswa) {
		return response()->json([
			'message' => 'mahasiswa tidak di temukan'
		], 404);
	}

	return response()->json(['data' => $mahasiswa]);
}

=== Membuat data baru ===

public function store(Request $request) {
	$rules = [
		"nama" => ['required'],
		"alamat" => ['required'],
	];

	$validated = Validator::make($request->all(), $rules);
	if ($validated->fails()) {
		return response()->json([
			"status" => 403,
			"errors" => $validated->errors(),
		]);
	}

	$mahasiswa = Mahasiswa::create([
		'nama' => $request->input('nama'),
		'alamat' => $request->input('alamat'),
	]);

	return response()->json([
		'message' => 'Mahasiswa berhasil di tambahkan',
		'student' => '$mahasiswa',
	], 201);
}

=== Memperbaiki data ===

public function update(Request $request, $id) {
	$mahasiswa = Mahasiswa::find($id);

	if (!$mahasiswa) {
		return response()->json([
			'message' => 'Mahasiswa tidak di temukan',
		], 404);
	}

	$this->validated($request, [
		'nama' => 'required',
		'alamat' => 'required',
	]);

	$mahasiswa->nama = $request->input('nama');
	$mahasiswa->alamat = $request->input('alamat');
	$mahasiswa->save();

	return response()->json([
		'message' => 'Mahasiswa berhasil di update',
		'student' => '$mahasiswa',
	], 200);
}

=== Menghapus data mahasiswa ===

public function destroy($id) {
	$mahasiswa = Mahasiswa::find($id);

	if (!$mahasiswa) {
		return response()->json([
			'message' => 'Mahasiswa tidak di temukan',
		], 404);
	}

	$mahasiswa->delete();

	return response()->json([
		'message' => 'Mahasiswa berhasil dihapus',
		'student' => '$mahasiswa',
	], 200)
}

